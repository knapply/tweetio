// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// is_valid_point
Rcpp::LogicalVector is_valid_point(const Rcpp::ListOf<Rcpp::NumericVector>& geo_coords);
RcppExport SEXP _tweetio_is_valid_point(SEXP geo_coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::NumericVector>& >::type geo_coords(geo_coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(is_valid_point(geo_coords));
    return rcpp_result_gen;
END_RCPP
}
// is_valid_bbox
Rcpp::LogicalVector is_valid_bbox(const Rcpp::ListOf<Rcpp::NumericVector>& bbox_coords);
RcppExport SEXP _tweetio_is_valid_bbox(SEXP bbox_coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::NumericVector>& >::type bbox_coords(bbox_coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(is_valid_bbox(bbox_coords));
    return rcpp_result_gen;
END_RCPP
}
// prep_bbox
Rcpp::List prep_bbox(const Rcpp::ListOf<Rcpp::NumericVector>& bbox_coords);
RcppExport SEXP _tweetio_prep_bbox(SEXP bbox_coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::NumericVector>& >::type bbox_coords(bbox_coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(prep_bbox(bbox_coords));
    return rcpp_result_gen;
END_RCPP
}
// read_tweets
SEXP read_tweets(const std::vector<std::string>& file_paths, const bool verbose, double batch_size, const double reserve);
RcppExport SEXP _tweetio_read_tweets(SEXP file_pathsSEXP, SEXP verboseSEXP, SEXP batch_sizeSEXP, SEXP reserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type file_paths(file_pathsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< const double >::type reserve(reserveSEXP);
    rcpp_result_gen = Rcpp::wrap(read_tweets(file_paths, verbose, batch_size, reserve));
    return rcpp_result_gen;
END_RCPP
}
// unnest_entities2_impl
SEXP unnest_entities2_impl(const SEXP& tracker, const Rcpp::List& source, const Rcpp::List& target, const Rcpp::CharacterVector& col_names);
RcppExport SEXP _tweetio_unnest_entities2_impl(SEXP trackerSEXP, SEXP sourceSEXP, SEXP targetSEXP, SEXP col_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type tracker(trackerSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type col_names(col_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(unnest_entities2_impl(tracker, source, target, col_names));
    return rcpp_result_gen;
END_RCPP
}
// unnest_edges
SEXP unnest_edges(const Rcpp::CharacterVector& user_id, const Rcpp::ListOf<Rcpp::CharacterVector>& target, const Rcpp::CharacterVector& status_id, const Rcpp::NumericVector& created_at);
RcppExport SEXP _tweetio_unnest_edges(SEXP user_idSEXP, SEXP targetSEXP, SEXP status_idSEXP, SEXP created_atSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type user_id(user_idSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector>& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type status_id(status_idSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type created_at(created_atSEXP);
    rcpp_result_gen = Rcpp::wrap(unnest_edges(user_id, target, status_id, created_at));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tweetio_is_valid_point", (DL_FUNC) &_tweetio_is_valid_point, 1},
    {"_tweetio_is_valid_bbox", (DL_FUNC) &_tweetio_is_valid_bbox, 1},
    {"_tweetio_prep_bbox", (DL_FUNC) &_tweetio_prep_bbox, 1},
    {"_tweetio_read_tweets", (DL_FUNC) &_tweetio_read_tweets, 4},
    {"_tweetio_unnest_entities2_impl", (DL_FUNC) &_tweetio_unnest_entities2_impl, 4},
    {"_tweetio_unnest_edges", (DL_FUNC) &_tweetio_unnest_edges, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_tweetio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
